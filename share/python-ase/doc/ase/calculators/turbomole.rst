.. module:: turbomole

=========
TURBOMOLE
=========

Introduction
============

TURBOMOLE_ is a density-functional or Hartree Fock code using 
atom centered orbitals. This 
interface makes it possible to use TURBOMOLE_ as a calculator in ASE.

.. _Turbomole: http://www.turbomole.com/



Environment variables
=====================

Set environment variables in your configuration file:

- bash::

  $ TURBODIR=/my_disk/my_name/TURBOMOLE
  $ PATH=$PATH:$TURBODIR/scripts
  $ PATH=$PATH:$TURBODIR/bin/‘sysname‘

- csh/tcsh::

  $ setenv TURBODIR /my_disk/my_name/TURBOMOLE
  $ set path=($path ${TURBODIR}/scripts)
  $ set path=($path ${TURBODIR}/bin/`sysname`)


Turbomole Calculator
==================== 

All usual turbomole input files generated by Turbomole's define 
[coord, control, basis, (auxbasis), 
mos/alpha+beta] must be present in the current working directory. 

Turbomole files are updated during the ASE-run. 

Do not use internal coordinates, only cartesians are allowed.

In the coord file one can fix atoms the turbomole way (writing a 'f' in the 
end of the line in the coord file).

Ase-Turbomole uses turbomole programs 'ridft' and 'rdgrad' 
if keyword '$ricore' is present in the Turbomole's control file. 
Otherwise programs 'dscf' and 'grad' are used.


Example1: Geometry Optimization
===============================


.. literalinclude:: turbomole_ex1_relax.py


Example2: Diffusion run using NEB 
==================================


.. literalinclude:: turbomole_ex2_diffuse_usingNEB.py


Example3: Diffusion run using NEB, Restart old calculation
==========================================================

.. literalinclude:: turbomole_ex3_restart_diffuse_usingNEB.py
 

For developers: python files affected by the turbomole interface
================================================================

.. literalinclude:: turbomole_changes.txt

